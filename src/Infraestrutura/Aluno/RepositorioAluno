<?php

namespace Project\CleanArchitecture\Infraestrutura\Aluno;

use Project\CleanArchitecture\Dominio\Aluno\Cpf;
use Project\CleanArchitecture\Dominio\Aluno\Aluno;
use Project\CleanArchitecture\Dominio\Aluno\InterfaceAluno;

class RepositorioALuno implements InterfaceAluno
{
    private \PDO $con;

    public function __construct(\PDO $con)
    {
        $this->con = $con;
    }
    
    public function adicionar(Aluno $aluno): void
    {
        $sql = "INSERT INTO alunos VALUES (:nome, :email, :cpf);";
        $stmt = $this->con->prepare($sql);
        $stmt->bindValue('nome', $aluno->nome());
        $stmt->bindValue('cpf', $aluno->cpf());
        $stmt->bindValue('email', $aluno->email());
        $stmt->execute();

        $sql = 'INSERT INTO telefones VALUES (:ddd, :numero, :cpf_aluno)';
        $stmt = $this->con->prepare($sql);
        $stmt->bindValue('cpf_aluno', $aluno->cpf());

        /**
         * @var Telefone $telefone
         */
        foreach ($aluno->telefones() as $telefone) {

            $stmt->bindValue('ddd', $telefone->ddd());
            $stmt->bindValue('numero', $telefone->numero());
            $stmt->execute();
        }
    }

    public function buscarPorCpf(Cpf $cpf): Aluno
    {
        $sql = 'SELECT cpf, nome, email, ddd, numero as numero_telefone
                FROM alunos
                LEFT JOIN telefones ON telefone.cpf_aluno = alunos.cpf
                WHERE alunos.cpf = ?
        ';

        $stmt = $this->con->prepare($sql);
        $stmt->bindValue(1, (string) $cpf);

        $dadosAluno = $stmt->fetchAll(\PDO::FETCH_ASSOC);

        if (count($dadosAluno) === 0) {
            throw new \DomainException("CPF $cpf não encontrado no cadastro de alunos");
        }

        return $this->mapearALuno($dadosAluno);
    }

    private function mapearAluno(array $dadosAluno): Aluno
    {
        $primeiraLinha = $dadosAluno[0];
        $aluno = Aluno::comNomeEmailCpf(
            $primeiraLinha['nome'],
            $primeiraLinha['email'],
            $primeiraLinha['cpf']
        );

        $telefones = array_filter(
            $dadosAluno,
            fn ($linha) => $linha['ddd'] != null && $linha['numero_telefone'] != null
        );

        foreach ($telefones as $linha) {
            $aluno->adicionarTelefone($linha['ddd'], $linha['numero']);
        }

        return $aluno;
    }

    /**
     * @return Aluno[]
     */
    public function buscaTodos(): array
    {
        $sql = 'SELECT cpf, nome, email, ddd, numero as numero_telefone
                FROM alunos
                LEFT JOIN telefones ON telefone.cpf_aluno = alunos.cpf
        ';
        $stmt = $this->con->query($sql);

        $listaDadosAlunos = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        $alunos = [];

        foreach($listaDadosAlunos as $dadosAluno) {
            if (!array_key_exists($dadosAluno['cpf'], $alunos)) {
                $alunos[$dadosAluno['cpf']] = Aluno::comNomeEmailCpf(
                    $dadosAluno['nome'],
                    $dadosAluno['email'],
                    $dadosAluno['cpf']
                );
            }

            $alunos[$dadosAluno['cpf']]->adicionarTelefone($dadosAluno['ddd'], $dadosAluno['numero']);
        }

        return array_values($alunos);
    }
    
}
